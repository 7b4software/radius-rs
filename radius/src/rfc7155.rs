// Code generated by machine generator; DO NOT EDIT.

use crate::avp::{AVPError, AVPType, AVP};
use crate::packet::Packet;

pub const ORIGINATING_LINE_INFO_TYPE: AVPType = 94;
pub fn delete_originating_line_info(packet: &mut Packet) {
    packet.delete(ORIGINATING_LINE_INFO_TYPE);
}
pub fn add_originating_line_info(packet: &mut Packet, value: &[u8]) -> Result<(), AVPError> {
    if value.len() != 2 {
        return Err(AVPError::InvalidAttributeLengthError(
            "2 bytes".to_owned(),
            value.len(),
        ));
    }
    packet.add(AVP::from_bytes(ORIGINATING_LINE_INFO_TYPE, value));
    Ok(())
}
pub fn lookup_originating_line_info(packet: &Packet) -> Option<Vec<u8>> {
    packet
        .lookup(ORIGINATING_LINE_INFO_TYPE)
        .map(|v| v.encode_bytes())
}
pub fn lookup_all_originating_line_info(packet: &Packet) -> Vec<Vec<u8>> {
    let mut vec = Vec::new();
    for avp in packet.lookup_all(ORIGINATING_LINE_INFO_TYPE) {
        vec.push(avp.encode_bytes())
    }
    vec
}
